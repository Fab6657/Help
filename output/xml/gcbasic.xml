<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Project</title>
<date>2023-11-01</date>
</info>
<section xml:id="_pwm2laser">
<title>PWM2Laser</title>
<simpara>May 2022 - November 2023</simpara>
<simpara>Author: Fabrice Engel<?asciidoc-br?>
<link xlink:href="mailto:FETFabrice@gmail.com">FETFabrice@gmail.com</link></simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image1.jpeg" contentwidth="322" contentdepth="264"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<section xml:id="_preface">
<title>Preface</title>
<simpara>Intention of this documentation is to be an introduction how to realize
a small electronic project useful in the CNC community. One of the ideas
was to show easily in small steps how to create with the CNC portal a
printed circuit board (PCB) from beginning to the end by using available
tools on the internet. This project uses a microcontroller, so also
explanation how to program this small “computers” will be described
inside this documentation.</simpara>
<simpara>I write this documentation not at the end of the project, but during
each creation steps. I did my best to avoid mistakes, but errors may
happen. By writing this preface, I just think how I changed a LED with a
different color, so you will find in schematic different description for
LED1. This happened, because I had no anymore red LED available on my
workbench. Lesson learned, check first the material stock&#8230;&#8203;</simpara>
<simpara>The project describes a PWM generator used for test and command a laser
diode module. These laser diode modules available on market require a
pulse width modulation (PWM) signal for operation. The microcontroller
will be able, by reading position of a potentiometer and with the
internal dedicated hardware module to generates the required PWM signal.
Few security functions will be integrated in the microcontroller
software.</simpara>
<simpara>This documentation is intended to be shared with my CNC community. I
wrote directly in English to reach more people in the world. I hope this
contribution will help you in your own CNC adventure.</simpara>
<simpara>For any questions, or suggestions, please contact me per email at
<link xlink:href="mailto:FETFabrice@gmail.com">FETFabrice@gmail.com</link></simpara>
<simpara>Wish you good pleasure in the journey of this project.</simpara>
<simpara><emphasis role="strong">This page is intentionally undocumented</emphasis></simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image3.jpeg" contentwidth="642" contentdepth="488"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
</section>
</section>
<section xml:id="_project_pwm2laser">
<title>Project PWM2Laser</title>
<simpara>May 2022 – November 2023</simpara>
<simpara>Dear CNC community, greetings from France. Let me introduce this little
project called PWM2Laser.</simpara>
<simpara>One friend asked me for help for testing a laser diode module he
received from another friend. Goal is to add the laser module to its CNC
and engraving wood. I am also user from a CNC, so why not, let me jump
in the adventure as well.</simpara>
<simpara>The laser diode module was already used, and we get it without power
module or another accessory.</simpara>
<simpara>Idea is before to interface the module with a computer and
<link xlink:href="https://www.machsupport.com/software/mach3/">MACH3</link>, first test the
electronic of the laser.</simpara>
<simpara>Interfacing with the computer will be next steps of the adventure&#8230;&#8203;</simpara>
<simpara>This laser modules requires 12V power distribution and a PWM signal to
adjust the laser modulation power.<?asciidoc-br?>
I had not directly a PWM generator available (except the computer which
I not want to use yet).</simpara>
<simpara>So, let’s realize a small electronic project based on microcontroller to
generate the required PWM signal.</simpara>
<simpara>This electronic project is now shared with all my CNC community, and
hopefully helpful for some of you.</simpara>
<simpara>This project will require several tools and applications, like:</simpara>
<itemizedlist>
<listitem>
<simpara>PCB design tool
<link xlink:href="https://www.autodesk.com/products/eagle/free-download">Autodesk Eagle</link>,</simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://groups.io/g/pcbgcode">pcb-gcode</link> plugin for CNC gcode creation
and PCB engraving with CNC,</simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://www.scorchworks.com/Gcoderipper/gcoderipper.html">G-Code
Ripper</link> tool to generate auto-leveler correction gcode and obtain good
PCB quality,</simpara>
</listitem>
<listitem>
<simpara>Microchip <link xlink:href="https://www.mikroe.com/mikrobasic-pic">MikroE mikroBasic PRO
for PIC</link> development tool (basic language for PIC8bits),</simpara>
</listitem>
</itemizedlist>
<simpara>(no license required, chosen microcontroller have maximum memory to be
used with demo version).</simpara>
<itemizedlist>
<listitem>
<simpara>For PWM2Laser version 1.3,
<link xlink:href="https://gcbasic.sourceforge.io/Typesetter/index.php/Home">toolchain
GCBASIC/GCStudio</link> was used to develop the PIC code.</simpara>
</listitem>
<listitem>
<simpara>PIC programmer like PICkit 2 (see
<link xlink:href="http://kair.us/projects/pickitminus/">PICkitminus</link>), or
<link xlink:href="https://www.mikroe.com/mikroprog-pic-dspic-pic32">mikroProg for PIC&#44;
dsPIC and PIC32</link><?asciidoc-br?>
(fully interfaced with MikroE mikroBasic PRO for PIC).</simpara>
</listitem>
<listitem>
<simpara>To debug hardware and microcontroller firmware, an oscilloscope may be
useful, but not required,</simpara>
</listitem>
</itemizedlist>
<simpara>a functional firmware is provided in the project folder.</simpara>
<simpara>Other goal of this project is to use a very limited bill of material,
also not using SMD components but classical through-hole components (I
have a lot on my bench). This will guaranty that you can easily
reproduce the electronic module even with less experience.</simpara>
<simpara>The PCB can be realized with your CNC. In the project folder, you will
find all necessary files to use your CNC or even adapt the sources files
for your needs if you like. Idea was also to explain <emphasis>how to?</emphasis> with a
CNC.</simpara>
<simpara>Now, one constrain is to use a microcontroller programmer. Even if the
chosen microcontroller is very common, it was decided to program it in
situ via connector to avoid too much additional components. You can use
programmers like PICkit 2 or PICkit 3, or any programmer for Microchip
PIC12F/PIC16F with ICSP connector. Also the microcontroller can be
programmed outside the module via ZIF support (not very practical if you
improve the firmware and need to reprogram time to time). With the
actual global semiconductor shortage, I wish you to find quickly the
required microcontroller and needed components.</simpara>
<simpara>The selected microcontroller is a Microchip PIC12F683I/P, 8 pins, 6 I/O,
8Mhz, just enough for our needs. 2Kwords program memory, let’s see later
how much we need for the firmware. Update version 1.2 uses a
PIC12F1840I/P, and update 1.3 uses a PIC16F18313.</simpara>
<simpara>The firmware of the PWM module will have some particular security
functions like, AutoStop of the PWM signal after 20 secs (or permanent
run), no signal generation if potentiometer is not in the 0% range by
start.</simpara>
<simpara>The normal function will be PWM generation from 0% to 100% with several
signal frequencies up to few KHz (selection by push-button for PWM
frequency).</simpara>
<simpara>In general, this laser modules require 12V power with few amps. The
laser diode modules have a power of few watts (1W to 5W), in fact no
really know for that from my friend, the sellers from China give very
high values, but in reality it is not so much. The PWM signal may have a
frequency of few KiloHertz. Later when the laser module will be
connected with the computer, we will use a base frequency of 250Hz.</simpara>
<simpara>This frequency of 250Hz is very easy to be generated by the computer,
even if the computer is an older generation with Microsoft Windows XP
and older processor like Pentium 4.</simpara>
<simpara>I am using Windows 7 and
<link xlink:href="https://www.machsupport.com/software/mach3/">MACH3</link> software for CNC
control. No hardware controller like
<link xlink:href="https://www.warp9td.com/index.php">SmoothStepper</link> is used, only the
computer and the parallel port. My friend uses similar configuration.</simpara>
<simpara>How a laser diode module looks like?</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image4.png" contentwidth="291" contentdepth="283"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image5.png" contentwidth="377" contentdepth="255"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image6.png" contentwidth="625" contentdepth="518"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>We can read from the table, <emphasis>Control Method</emphasis> is PWM with TTL voltage
level (0V-5V), following example of laser module will work with
frequencies up to 30kHz.</simpara>
<simpara>On the next page, we will see some PWM signals on an oscilloscope
screen.</simpara>
<simpara>PWM signal near to 25%</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image7.png" contentwidth="529" contentdepth="334"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>PWM signal near to 80%</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image8.png" contentwidth="529" contentdepth="334"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The PWM signal will be connected to the PWM entry of the laser module
(e.g. below, max 1kHz PWM):</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image9.png" contentwidth="190" contentdepth="130"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The provided project folder contains all files and documentation
necessary for the realization of PWM2Laser in one single compressed Zip
file.</simpara>
<simpara>Unpacked file structure can be also downloaded from following Cloud
storage source.</simpara>
<simpara>Go to <link xlink:href="https://mega.nz/folder/DxcWCTjY#7FqW5tAA5Tu5wK24QdsTsQ">Link on
MEGA</link> (File sharing Cloud platform).</simpara>
<simpara>This will be also the internet place for updates (if of course this
happens).</simpara>
<simpara>Following project structure is presented:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image11.png" contentwidth="164" contentdepth="135"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>Most
important file <emphasis>PWM2Laser V1.3.pdf</emphasis>, the document you are actually
reading.</simpara>
<simpara>Folder <emphasis>Documentations</emphasis> contains 12F683/12F1840/16F18313 Data Sheet and
application notes from Microchip for CCP usage. It contains also a text
file for all links as well in <emphasis>pdf</emphasis> format providing clickable internet
links.</simpara>
<simpara>Folder <emphasis>Sources</emphasis> contains:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image12.png" contentwidth="642" contentdepth="56"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara><emphasis>- Firmware PIC12F683</emphasis> contains just one file, <emphasis>PWM2LaserV1.1.hex</emphasis> to be
programmed into the PIC12F683 microcontroller, <emphasis>Firmware PIC12F1840</emphasis>
another <emphasis>PWM2LaserV1.2.hex</emphasis> to be programmed into one PIC12F1840 and
<emphasis>Firmware PIC16F18313</emphasis> an other file <emphasis>PWM2LaserV1.3.hex</emphasis> for the model
PIC16F18313.</simpara>
<simpara>Do not take the wrong one for your microcontroller model. See update
sections for more information.</simpara>
<simpara><emphasis>- mikroBasic Project</emphasis> with the full files structure of the PWM2Laser
software source code.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>GCBASIC Project</emphasis> contains source code based on toolchain GCStudio, as
well assembled files.</simpara>
</listitem>
<listitem>
<simpara><emphasis>PCB CNC</emphasis> with the generated files for the realization by CNC with
MACH3 controller.</simpara>
</listitem>
<listitem>
<simpara><emphasis>PCB schematics</emphasis> contains both files for Eagle schematic and PCB of
PWM2Laser, bill of material as well DXF drawings of the PCB circuit.</simpara>
</listitem>
<listitem>
<simpara><emphasis>Test Pad Laser diode module</emphasis> contains the drawings for the wood
support in DXF format as well a picture of the final toolpath and
pictures from mounted pad with laser module.</simpara>
</listitem>
</itemizedlist>
<simpara>And latest folder, the <emphasis>Tools</emphasis> folder contains:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image13.png" contentwidth="232" contentdepth="114"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>This folder has all tools used for this project, except the Microchip
PIC Basic IDE, GCStudio &amp; GCBASIC, or MPLAB X which would increase the
size of the distribution package. Use provided links from
<emphasis>Documentations</emphasis> folder and download the latest version (mikroBasic
version 7.6.0 is actual).</simpara>
<simpara>Starting next page, we will begin with the schematic description of the
electronic module.</simpara>
<simpara>The electronic schematic our PWM2Laser generator will be as follow:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image14.png" contentwidth="642" contentdepth="528"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>On
the top, you can see the +5V power line with a 100mA +5V voltage linear
regulator. A Red led (LED1) indicate presence of +12V. Capacitors
ensures smooth power voltage. C4 capacitor with 100nF will be used for
decoupling the microcontroller Microchip PIC12F683I/P or PIC12F1840I/P</simpara>
<simpara>An ICSP JP1 connector on the left side give us opportunities to program
the firmware of the microcontroller directly without removing
microcontroller from its support. Push-button S1 is for Start and Stop
generation of PWM signal and push-button S2 allow selection of the PWM
signal frequencies. The potentiometer connected to an Analog entry pin
allow to vary the PWM signal from 0% to 100%, so we have a modulation of
the signal from fully off to full power range to test the laser power.</simpara>
<simpara>Red led (LED2) indicate some information, and Blue led (LED3) is for PWM
signal indication. JP3 is the connector for the laser module. It
distributes +12V power, GND and PWM signal. Several test points allow to
connect an oscilloscope or a multimeter. On the right side, we have the
microcontroller PIC12F683I/P<?asciidoc-br?>
(DIP 8 pins), the model PIC12F1840I/P is fully pin compatible and I do
not redraw the schematic.</simpara>
<simpara>After creation of the schematic, we jump into the creation of the PCB.
Placements of components are made manually, the actual reached size of
the first PCB is near 40mm * 48mm. Use large width possible for the
routing lines. On the end, we will also use a ground plane on the whole
PCB for signal GND. You can see on the next page, several steps of the
PCB conception. By finishing the PCB conception, we will use an Eagle
ULP program, <link xlink:href="https://groups.io/g/pcbgcode">pcb-gcode</link> (created by J.J) to
generate the CNC required compatible MACH3 gcode.</simpara>
<simpara>Scorch wrote also an excellent tool we will use for auto-leveler
options, <link xlink:href="https://www.scorchworks.com/Gcoderipper/gcoderipper.html">G-Code
Ripper</link>.</simpara>
<simpara>Few straps were necessary, I was not able to realize a single side PCB
without this additional connection lines on the top of the PCB.</simpara>
<simpara>PCB conception requires some attention. I wanted to have the signal
0V-GND on the edge of all PCB sides. So, it is important to place
adequately the components with GND connection to the external side of
the PCB.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image15.png" contentwidth="507" contentdepth="604"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>We start by routing manually the shortest connections. Some adjustments
may be necessary, like moving the voltage regulator, or move little the
power connector. Route also with the largest width possible, here 1mm.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image16.png" contentwidth="190" contentdepth="226"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>After some iterations (I needed 1h30 to route in a better way the
several wire connections), you can enlarge as much as possible the width
of the PCB’s wires. This will make the result of CNC engraving much
better.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image19.png" contentwidth="299" contentdepth="359"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Now it is time to place some documentation marks on the PCB, like + and
– of power connection, or PWM signal pin, or ICSP pin 1 connection,
etc&#8230;&#8203;</simpara>
<simpara>I am writing this documentation during the steps of project creation.
Not first create, test and use and document afterwards, but document
step by step. This mean, at this time, I have no idea if every thing<?asciidoc-br?>
I made will work like imagined. Nice adventure…</simpara>
<simpara>After<inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image21.png" contentwidth="582" contentdepth="404"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>
the PCB conception is completed, next step will be the gcode creation
with ULP program <link xlink:href="https://groups.io/g/pcbgcode">pcb-gcode</link>.</simpara>
<simpara>ULP pcb-gcode provide a simulation view of the CNC result. The colors
indicate the number of passes. This plugin creates also the gcode for
the drills. In my case, I will edit later the file to remove the tool
change orders and keep just one tool (diameter 0,9mm). On the simulation
view, the drill holes are represented by a cross X in color blue. As
bigger the cross X, as bigger is the diameter of the tool.</simpara>
<simpara>But I will not use this generated configuration yet, I will first modify
the shape of the PCB. I like to have some round corners and not this
sharp 90° square corners.</simpara>
<simpara>For that, an export in DXF format will be done, and a modification with
my favorite CAD/CAM tool will be made. In
Eagle<inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image22.png" contentwidth="422" contentdepth="340"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>,
run the ULP program &lt;<emphasis>dxf.ulp</emphasis>&gt;:</simpara>
<simpara>After export, you will get
thi<inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image23.png" contentwidth="330" contentdepth="392"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>s
view, based on vectors inside the CAD application:</simpara>
<simpara>We need to select only the layer <emphasis>20</emphasis> (named <emphasis>dimension</emphasis> in the Eagle
Board file):</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image24.png" contentwidth="346" contentdepth="328"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>And we see in discontinues pink line the edge of the PCB. With my CAD
tool, will now change the corners in round shapes, let say with 2,5mm
radius:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image25.png" contentwidth="573" contentdepth="500"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Just need to export the new drawing as DXF from layer 20, and import it
into Eagle, but first, delete the existing dimension boards vectors in
the PCB project:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image26.png" contentwidth="229" contentdepth="270"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>After successful removing, execute following ULP program
&lt;<emphasis>import-dxf-v2.1.ulp</emphasis>&gt;</simpara>
<simpara>(it is provided in the <emphasis>Tools</emphasis> folder of the compressed project file):</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image28.png" contentwidth="416" contentdepth="510"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Select the file previously created with the CAD application, here
&lt;<emphasis>PWM2LaserV01 PCB.dxf</emphasis>&gt;, check target layer <emphasis>20 Dimension</emphasis>, check
also the units and click <emphasis>OK</emphasis>.</simpara>
<simpara>A script file is generated and ready to be executed, clicking on <emphasis>Run</emphasis>:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image29.png" contentwidth="258" contentdepth="245"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>DXF import was successful, round corners are now in place, and our PCB
look like more professional, isn&#8217;t?</simpara>
<simpara>Now we can generate the final PCB gcode files. But before, I have no
idea yet if I not made mistakes, or if the concept like yet is correct.
Sure, this is based on my experience, and I hope that will work, but, a
double check is always useful. So, before I continue, I will check
(again, yep!).</simpara>
<simpara>It is important to check if the electrical connections are correctly set
in the schematic. Or if you have not forget a wire on the PCB, that may
happen because straps are not so visible. Check also if the GND ground
plan touch the complete area, not that a zone has no electrical
connection at all with GND signal. Please check that the width of the
wire as well the GND ground plan is large enough round laser connector
to let pass the right amount of current.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image31.png" contentwidth="285" contentdepth="226"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>correct.
<inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image32.png" contentwidth="199" contentdepth="237"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>Example
below with +12V signal:</simpara>
<simpara>Take the time to double check, may be helpful, and remember, we learn by
and from mistakes!</simpara>
<simpara>By reviewing, I decided to move the PWM signal test point, to be not so
near to the laser module connector, and resize as well the size of the
pad which was to big. Additionally, I optimized some connections:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image33.png" contentwidth="327" contentdepth="396"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Now, it is time to run the creation of related gcode. Execute command
&lt;<emphasis>run pcb-gcode&#8201;&#8212;&#8201;setup</emphasis>&gt;</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image34.png" contentwidth="642" contentdepth="290"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>By clicking <emphasis>Accept and make my board</emphasis> button, the calculation will
start and preview will be displayed. In the project folder, you will
find the related gcode files, compatible to the selected postprocessor.
For me, that is MACH3.</simpara>
<simpara>Activating option <emphasis>Spot drill holes</emphasis> will mark the hole to be drill and
will help more for the positioning of the drilling bit during operation.</simpara>
<simpara>Did you noticed that the preview is mirrored?</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image35.png" contentwidth="642" contentdepth="509"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Remember you this mirrored situation, we need later to correct the PCB
edges dxf file to take care about this particular result.</simpara>
<simpara>Next step will be to use the generated etch file and pass it into a very
special program,
<link xlink:href="https://www.scorchworks.com/Gcoderipper/gcoderipper.html"><emphasis>G-Code
Ripper</emphasis></link>.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image36.png" contentwidth="621" contentdepth="151"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>This program created by Scorch (under Python), will allow you to add
additional commands to realize a compensate Toolpath over the Z axis.
This is called auto-leveler. If you have already engraved a PCB, maybe
you experienced bad results. If the table is not very plan, you can
easily have bad engraving result for the wire. Or too much copper was
removed, or not enough.</simpara>
<simpara>The generated drill file will be modified later to keep only one
diameter for the bit (0.9mm), and to remove all tool changing commands.
For the drill, we do not need to compensate the Z axis. Just go deep
enough. If you board made 1,5mm, then you can drill up to 1,65mm.</simpara>
<simpara>Execute the program <emphasis>G-Code Ripper</emphasis> now, and select <emphasis>Auto Probe</emphasis>:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image37.png" contentwidth="367" contentdepth="278"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Click on File and open the created gcode for PCB engraving:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image38.png" contentwidth="388" contentdepth="151"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Select file
<emphasis>PW_<inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image39.png" contentwidth="527" contentdepth="401"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>_M2LaserV01.bot.etch.tap</emphasis>
and open it, G-Code Ripper will display like:</simpara>
<simpara>Some control fields marked in blue need to be reviewed:</simpara>
<itemizedlist>
<listitem>
<simpara>Number of scan points X and Y. For the size of this PCB, I recommend 4
x 5 points,</simpara>
</listitem>
<listitem>
<simpara>Scale, check that you have 100%,</simpara>
</listitem>
<listitem>
<simpara>Select MACH3 as postprocessor,</simpara>
</listitem>
<listitem>
<simpara>Adjust Probe settings, Probe Z safe = 2.2mm, Probe Depth = -0.5 and
Probe Feed = 30mm/min,</simpara>
</listitem>
</itemizedlist>
<simpara>After changes, click on <emphasis>Recalculate</emphasis>, <emphasis>G-Code Ripper</emphasis> will display the
new parameters:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image40.png" contentwidth="566" contentdepth="436"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>We see in the preview windows the new probe points with the white cross.</simpara>
<simpara>Click now on <emphasis>Save G-Code File – Probe &amp; Cut</emphasis> and save in a new file:</simpara>
<simpara><emphasis>G-Code Ripper</emphasis> added 2 sections inside the original gcode created by
pcb-gcode, first a Probe sequence to learn the correct high compensation
for Z axis, then a second one to consider the compensation during the
engraving operations.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image41.png" contentwidth="194" contentdepth="264"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Now, again double check and go to shop for CNC engraving, yeah….</simpara>
<simpara>How to fix the PCB on the CNC table? I am using double side adhesive
tape to fix the PCB on the table.</simpara>
<simpara>But my table is not so ready right now to receive an PCB to be
engraving, see by you self:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image44.jpeg" contentwidth="301" contentdepth="226"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Have a lot of holes and removed materiel from previous toolpaths, so I
will use additional sacrificial plate to fix my PCB to be engraved. This
plate will be surfaced before being used again for this PWM2Laser
project.</simpara>
<simpara>I am using a 31mm flat mill for this operation. Toolpath job is quite
fast by using so large diameter of this bit.</simpara>
<simpara>Before the surfacing work will start, first center the job and adjust
origin high of Z on the top of the surface.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image46.jpeg" contentwidth="497" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Then surfacing job is started.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image47.jpeg" contentwidth="497" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Ahhh… quality of wood plates! Hole inside, but for today, this is not an
issue at all.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image48.jpeg" contentwidth="496" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Will use an old epoxy plate, used already for other projects. This PCB
have still enough material available for this project PWM2Laser. The
yellow cable you see is to connect the cable from the probe high Z axis.</simpara>
<simpara>You remember that we use an auto-leveler function, and this using
electrical ground detection to work.</simpara>
<simpara>Here my used epoxy plate for the project:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image49.jpeg" contentwidth="497" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>But first remove the old double side adhesive tape!</simpara>
<simpara>Not the best work here but, need to be done if I want to use this plate,
so hop, lets go. After few minutes later intensive boring work, the
plate is ready, applied with new adhesive double side tape.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image50.jpeg" contentwidth="497" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>To engrave PCB, I am using particular engraving bits. This are
<link xlink:href="https://www.sorotec.de/shop/Cutting-Tools/sorotec-tools/Engraving-bits/V-Router-Bit/">solid
carbide V-Router bits</link> provided by the German company Sorotec. This
V-Router bit have a cut angle of 30°</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image52.png" contentwidth="436" contentdepth="293"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>These bits allow to engrave PCBs. Other similar bits exist. Use the best
one for your result!</simpara>
<simpara>Consider also the wearing of this bit. The point is very small and
subject to be wear quickly.</simpara>
<simpara>This bit is very vulnerable. Handle it carefully!</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image53.png" contentwidth="498" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Take care that the copper of the PCB is well connected to the Probe
entry of your CNC control. If not, you have very high risks to destroy
your V-Router bit.</simpara>
<simpara>Mach3 allows us a preview of the PCB toolpath. After successfully loaded
PCB gcode file, the preview window contains the expected result.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image54.png" contentwidth="529" contentdepth="419"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>You can rotate the view with the mouse to see more details:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image55.png" contentwidth="529" contentdepth="419"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>PCB etching can be started now….</simpara>
<simpara>Before the routing itself, the job starts first by measuring the
flatness of the PCB and store the values of 20 measurement points into a
file (this is a G-Code Ripper option to memorize in a separated file).</simpara>
<simpara>Below the result (file <emphasis>PWM2LaserV01.savemeasures.txt</emphasis> is provided for
information in the project folder):</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image56.png" contentwidth="219" contentdepth="301"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>First and second columns are the X and Y reference of the measurement
point, third column is the value for the compensation Z axis. Do not use
this file for the creation of your PCB, let the measures be renewed, you
have not the same flatness as mine table &amp; PCB!</simpara>
<simpara>So, everything is measured, routing job is started:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image58.jpeg" contentwidth="517" contentdepth="415"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Once routing finished, you can replace the 30° V-Bit with a drill bit. I
will drill all holes with a 0.9mm carbide drill bit. Even the holes with
bigger diameter will be first drill with the CNC, and later I will drill
manually the few bigger holes (power connector for instance).</simpara>
<simpara>For drilling operation, use carbide drill bits. There sharpness has a
longer duration than other products like HSS. The holes cutting are much
better and very clean.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image59.jpeg" contentwidth="520" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>It was necessary to edit the generated drill file and remove all
sections related to tool change orders:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image60.png" contentwidth="275" contentdepth="210"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>If you have an automatic tool changer, of course no needs to edit the
file, take care you loaded the right drill bits on the tools changer
support.</simpara>
<simpara>Drill job is running, 1 second pause is marked by the spindle after full
drill depth to get a proper hole.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image62.jpeg" contentwidth="491" contentdepth="415"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>After drilling operation, last job will be the PCB edge cutting. This
will be done with a flat endmill 1.8mm bit.</simpara>
<simpara>Remember the mirrored job for PCB etching, this must be corrected for
the cutting job. PCB edge drawing must be mirrored cross the axis X0 to
get the correct vectors values. This can be easily done with a mirror
function from the CAD application:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image63.png" contentwidth="621" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Generate the correct toolpath job for your chosen bit diameter. You can
find in the project folder a MACH3 toolpath file for a 1.8mm endmill
bit. Run the job on your CNC, PCB is finished. Just remove it from the
table.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image65.jpeg" contentwidth="295" contentdepth="259"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>See result
<inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image66.png" contentwidth="522" contentdepth="604"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>coming
out from the CNC, not too bad! (removed manually small copper filet on
borders).</simpara>
<simpara>Let complete with the bigger holes drills and final check before
starting the soldering operations.</simpara>
<simpara>Use following picture to help you positioning the components on the PCB:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image67.png" contentwidth="642" contentdepth="764"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Start with soldering the 5 straps, then continue with the resistors,
diodes, dip support, capacitors, regulator.</simpara>
<simpara>We always start with the smallest components to terminate with the
biggest like connectors.</simpara>
<simpara>Table BOM (Bill of Material) can be automatically exported from Eagle
application.</simpara>
<simpara>Use the command &lt;<emphasis>run bom</emphasis>&gt; in the Eagle schematic window:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="100%"?>
<?dbfo table-width="100%"?>
<?dblatex table-width="100%"?>
<tgroup cols="5">
<colspec colname="col_1" colwidth="64*"/>
<colspec colname="col_2" colwidth="72*"/>
<colspec colname="col_3" colwidth="85*"/>
<colspec colname="col_4" colwidth="77*"/>
<colspec colname="col_5" colwidth="128*"/>
<thead>
<row>
<entry align="left" valign="top"><emphasis role="strong">Part</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Value</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Device</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Package</emphasis></entry>
<entry align="left" valign="top"><emphasis role="strong">Description</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>C1</simpara></entry>
<entry align="left" valign="top"><simpara>47µF 25V</simpara></entry>
<entry align="left" valign="top"><simpara>CPOL-EUE2.5-7</simpara></entry>
<entry align="left" valign="top"><simpara>E2,5-7</simpara></entry>
<entry align="left" valign="top"><simpara>POLARIZED CAPACITOR, European
symbol</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>C2</simpara></entry>
<entry align="left" valign="top"><simpara>100nF</simpara></entry>
<entry align="left" valign="top"><simpara>C-EU050-024X044</simpara></entry>
<entry align="left" valign="top"><simpara>C050-024X044</simpara></entry>
<entry align="left" valign="top"><simpara>CAPACITOR, European symbol</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>C3</simpara></entry>
<entry align="left" valign="top"><simpara>100nF</simpara></entry>
<entry align="left" valign="top"><simpara>C-EU050-024X044</simpara></entry>
<entry align="left" valign="top"><simpara>C050-024X044</simpara></entry>
<entry align="left" valign="top"><simpara>CAPACITOR, European symbol</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>C4</simpara></entry>
<entry align="left" valign="top"><simpara>100nF</simpara></entry>
<entry align="left" valign="top"><simpara>C-EU050-024X044</simpara></entry>
<entry align="left" valign="top"><simpara>C050-024X044</simpara></entry>
<entry align="left" valign="top"><simpara>CAPACITOR, European symbol</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>D1</simpara></entry>
<entry align="left" valign="top"><simpara>1N4004</simpara></entry>
<entry align="left" valign="top"><simpara>1N4004</simpara></entry>
<entry align="left" valign="top"><simpara>DO41-10</simpara></entry>
<entry align="left" valign="top"><simpara>DIODE</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>D2</simpara></entry>
<entry align="left" valign="top"><simpara>1N4004</simpara></entry>
<entry align="left" valign="top"><simpara>1N4004</simpara></entry>
<entry align="left" valign="top"><simpara>DO41-10</simpara></entry>
<entry align="left" valign="top"><simpara>DIODE</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IC1</simpara></entry>
<entry align="left" valign="top"><simpara>7805L</simpara></entry>
<entry align="left" valign="top"><simpara>7805L</simpara></entry>
<entry align="left" valign="top"><simpara>TO92</simpara></entry>
<entry align="left" valign="top"><simpara>Positive VOLTAGE REGULATOR</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IC2</simpara></entry>
<entry align="left" valign="top"><simpara>PIC12F683P</simpara></entry>
<entry align="left" valign="top"><simpara>PIC12F683I/P<?asciidoc-br?>
or PIC12F1840I/P</simpara></entry>
<entry align="left" valign="top"><simpara>DIL8</simpara></entry>
<entry align="left" valign="top"><simpara>8-Pin Flash-Based, 8-Bit CMOS Microcontrollers</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>JP1</simpara></entry>
<entry align="left" valign="top"><simpara>Pinhead 5 pin</simpara></entry>
<entry align="left" valign="top"><simpara>PINHD-1X5</simpara></entry>
<entry align="left" valign="top"><simpara>1X05</simpara></entry>
<entry align="left" valign="top"><simpara>PIN HEADER, ICSP programming</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>JP2</simpara></entry>
<entry align="left" valign="top"><simpara>Potentiometer 10k</simpara></entry>
<entry align="left" valign="top"><simpara>PINHD-1X3</simpara></entry>
<entry align="left" valign="top"><simpara>1X03</simpara></entry>
<entry align="left" valign="top"><simpara>PIN HEADER</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>JP3</simpara></entry>
<entry align="left" valign="top"><simpara>Laser</simpara></entry>
<entry align="left" valign="top"><simpara>PINHD-1X3</simpara></entry>
<entry align="left" valign="top"><simpara>1X03</simpara></entry>
<entry align="left" valign="top"><simpara>PIN HEADER</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LED1</simpara></entry>
<entry align="left" valign="top"><simpara>Red</simpara></entry>
<entry align="left" valign="top"><simpara>LED3MM</simpara></entry>
<entry align="left" valign="top"><simpara>LED3MM</simpara></entry>
<entry align="left" valign="top"><simpara>LED replaced with a green LED</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LED2</simpara></entry>
<entry align="left" valign="top"><simpara>Red</simpara></entry>
<entry align="left" valign="top"><simpara>LED3MM</simpara></entry>
<entry align="left" valign="top"><simpara>LED3MM</simpara></entry>
<entry align="left" valign="top"><simpara>LED 3mm red</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>LED3</simpara></entry>
<entry align="left" valign="top"><simpara>Blue</simpara></entry>
<entry align="left" valign="top"><simpara>LED3MM</simpara></entry>
<entry align="left" valign="top"><simpara>LED3MM</simpara></entry>
<entry align="left" valign="top"><simpara>LED 3mm blue</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>POWER</simpara></entry>
<entry align="left" valign="top"><simpara>Connector</simpara></entry>
<entry align="left" valign="top"><simpara>MKDSN1,5/2-5,08</simpara></entry>
<entry align="left" valign="top"><simpara>MKDSN1,5/2-5,08</simpara></entry>
<entry align="left" valign="top"><simpara>MKDSN 1,5/ 2-5,08
connector</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>R1</simpara></entry>
<entry align="left" valign="top"><simpara>47k</simpara></entry>
<entry align="left" valign="top"><simpara>R-EU_0207/7</simpara></entry>
<entry align="left" valign="top"><simpara>0207/7</simpara></entry>
<entry align="left" valign="top"><simpara>RESISTOR, European symbol</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>R2</simpara></entry>
<entry align="left" valign="top"><simpara>47k</simpara></entry>
<entry align="left" valign="top"><simpara>R-EU_0207/7</simpara></entry>
<entry align="left" valign="top"><simpara>0207/7</simpara></entry>
<entry align="left" valign="top"><simpara>RESISTOR, European symbol</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>R3</simpara></entry>
<entry align="left" valign="top"><simpara>2.2k</simpara></entry>
<entry align="left" valign="top"><simpara>R-EU_0207/7</simpara></entry>
<entry align="left" valign="top"><simpara>0207/7</simpara></entry>
<entry align="left" valign="top"><simpara>RESISTOR, European symbol</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>R4</simpara></entry>
<entry align="left" valign="top"><simpara>470R</simpara></entry>
<entry align="left" valign="top"><simpara>R-EU_0207/7</simpara></entry>
<entry align="left" valign="top"><simpara>0207/7</simpara></entry>
<entry align="left" valign="top"><simpara>RESISTOR, European symbol</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>R5</simpara></entry>
<entry align="left" valign="top"><simpara>330R</simpara></entry>
<entry align="left" valign="top"><simpara>R-EU_0207/7</simpara></entry>
<entry align="left" valign="top"><simpara>0207/7</simpara></entry>
<entry align="left" valign="top"><simpara>RESISTOR, European symbol</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>S1</simpara></entry>
<entry align="left" valign="top"><simpara>Start-Stop</simpara></entry>
<entry align="left" valign="top"><simpara>10-XX</simpara></entry>
<entry align="left" valign="top"><simpara>B3F-10XX</simpara></entry>
<entry align="left" valign="top"><simpara>OMRON SWITCH</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>S2</simpara></entry>
<entry align="left" valign="top"><simpara>Frequency</simpara></entry>
<entry align="left" valign="top"><simpara>10-XX</simpara></entry>
<entry align="left" valign="top"><simpara>B3F-10XX</simpara></entry>
<entry align="left" valign="top"><simpara>OMRON SWITCH</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>TP1</simpara></entry>
<entry align="left" valign="top"><simpara>TPPAD1-20</simpara></entry>
<entry align="left" valign="top"><simpara>TPPAD1-20</simpara></entry>
<entry align="left" valign="top"><simpara>P1-20</simpara></entry>
<entry align="left" valign="top"><simpara>Test pad – optional</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>TP2</simpara></entry>
<entry align="left" valign="top"><simpara>TPPAD1-20</simpara></entry>
<entry align="left" valign="top"><simpara>TPPAD1-20</simpara></entry>
<entry align="left" valign="top"><simpara>P1-20</simpara></entry>
<entry align="left" valign="top"><simpara>Test pad – optional</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>TP3</simpara></entry>
<entry align="left" valign="top"><simpara>TPPAD1-20</simpara></entry>
<entry align="left" valign="top"><simpara>TPPAD1-20</simpara></entry>
<entry align="left" valign="top"><simpara>P1-20</simpara></entry>
<entry align="left" valign="top"><simpara>Test pad – optional</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>TP4</simpara></entry>
<entry align="left" valign="top"><simpara>TPPAD1-20</simpara></entry>
<entry align="left" valign="top"><simpara>TPPAD1-20</simpara></entry>
<entry align="left" valign="top"><simpara>P1-20</simpara></entry>
<entry align="left" valign="top"><simpara>Test pad – optional</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Collect the components before starting soldering (LED1 red replaced with
green one):</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image68.png" contentwidth="426" contentdepth="332"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Once you get all components, you can solder your PCB. Straps and
smallest components must be soldered first. This is easier to handle. A
good weld must be shiny. A matte weld may be not good.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image69.jpeg" contentwidth="170" contentdepth="189"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Consider the mount way of the 2 diodes and the 3 LED’s, Anode to + and
Cathode to GND – 0V. If wrong way, they will not light. If you make the
mistake for the diode protecting the 12V line circuit, then your module
will not work once applied 12V on power distribution connector.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image72.jpeg" contentwidth="174" contentdepth="189"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Before you will place the microcontroller PIC12F683I/P, check first if
the voltage regulator is working and that you have a voltage of +5V
between Pin 1 and Pin 8 of the DIP support. By applying a +12V
distribution on the power connector, green
le<inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image75.jpeg" contentwidth="322" contentdepth="359"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>d
(LED1 initially red in the schematic, now green) must light on.</simpara>
<simpara>If the voltage is correct with +5V and your project does not smoke, then
you can place the microcontroller on its support. First disconnect power
distribution, take care on the correct position of the microcontroller
on the DIP8 support, Pin 1 side of both connectors (Laser module and
Potentiometer, on the left below on picture).</simpara>
<simpara>Complete by soldering the cable with the potentiometer. Do not forget
before to pass the shrink tubes.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image76.png" contentwidth="531" contentdepth="510"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Hardware part is so far completed. We can now continue with the software
part of this project.</simpara>
<simpara>I am using <link xlink:href="https://www.mikroe.com/mikrobasic-pic">MikroE mikroBasic PRO
for PIC</link>. The installation file is not provided in the project folder,
that would increase the
<inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image77.png" contentwidth="573" contentdepth="234"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>size
for sharing and downloads. Use provided link file to find it on the
internet:</simpara>
<simpara>I am generally developing on Microchip PIC microcontroller with Basic
language. Had no really opportunities to learn C/C++ in my experiences,
maybe in future, but for this project, let use this programming
language.</simpara>
<simpara>By creating the project, configure it like below:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image78.png" contentwidth="479" contentdepth="283"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>We will use a system clock of 4Mhz to try to reach lower PWM
frequencies. No idea yet how would be exactly the results, this will be
a surprise for me. I did not make any calculation! Bad? Yep&#8230;&#8203;</simpara>
<simpara>Good documentation requires lot of comments in the source code. I do my
best to comment each single source code line. This is good for the
understanding of this project, but also good for me, to remember what<?asciidoc-br?>
I created in the past. I forget a lot of things, and these comments are
my memories.</simpara>
<simpara>On the beginning of the source code, you can find a banner with general
information about the project, followed by used microcontroller
PIC12F683 and its pins and ports descriptions. The schematic is not
necessarily available when developing the source code. That may be a
good help just by scrolling in the
<inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image79.png" contentwidth="642" contentdepth="378"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>code.</simpara>
<simpara>The banner contains historical information about the programming steps.
This may be helpful for experience, in my case, this helps me a lot to
capitalize information. I also like to include a picture of the used
microcontroller:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image80.png" contentwidth="472" contentdepth="321"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>After this information banner, we will define the ports. This is done by
the command <emphasis>symbol</emphasis> which affects names to ports and pins of the
microcontroller.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image81.png" contentwidth="631" contentdepth="151"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>I am using naming convention particular rules, O_ for output, I_ for
input and A_ for analog input. This will always remember you the
settings, even if it is more obvious for this project.</simpara>
<simpara>Few comments about the type and model of microcontroller. I am using
since few years this family of microcontroller with good results. This
model PIC12F683 is a simple microcontroller, easy to understand and to
work with. Also, my shop have a lot of this small ‘bugs’ in its drawers.
So easy and available, hope would be the same for you. If this model
would be not available, you can look on a newer model like PIC12F1840.
But in this case, you will be required to review a little the source
code, in particular the ports and pins settings.</simpara>
<simpara>The package and pins function will be the same, you will still find on
pin 5 a PWM output.</simpara>
<simpara>Next step will be declarations of the variables used. Right now, I will
first do a break in the creation of the documentation and spend more
time with the creation of the program. Once I get a running code, I will
jump again in the documentation. This will avoid me to only jump in and
out permanently…</simpara>
<simpara>&#8230;&#8203;</simpara>
<simpara>…&#8230;&#8203;</simpara>
<simpara>………..</simpara>
<simpara>…………..… After few days and coffees…………&#8230;&#8203;.</simpara>
<simpara>..………</simpara>
<simpara>…&#8230;&#8203;</simpara>
<simpara>…</simpara>
<simpara>A running project is borne. Let see how it looks like.</simpara>
<simpara>Before we jump in the source code, please consider, if you like to go
deeper in the software section of this project, have always available
under your hand, the PIC12F683 Data Sheet. This is <emphasis role="strong">the Reference</emphasis>&#8230;&#8203;</simpara>
<simpara>Just below the link to this documentation (which is also available in
the project folder):</simpara>
<simpara><link xlink:href="https://ww1.microchip.com/downloads/en/DeviceDoc/41211D_.pdf">https://ww1.microchip.com/downloads/en/DeviceDoc/41211D_.pdf</link></simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image82.png" contentwidth="282" contentdepth="366"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Like mentioned before, the banner section of the source code contains
historical information. I noted the major steps of the software
development. Take a look first, you will learn how the software was
created, and the issues I faced during this phase. I will not describe
all here in this documentation, and the next pages are dedicated to
explanation how it’s work finally&#8230;&#8203;</simpara>
<simpara>By looking the historical section, you will read that I have already
made changes in the handling of the interrupts and the timer usages
according first notes beginning at the 1<superscript>st</superscript> of May 2022. So, let’s go!</simpara>
<simpara>The complete program is composed with several sections:</simpara>
<simpara>Banner, Historic, Microcontroller description with ports&amp;pins, Ports
definitions, Variables and constants definitions, <emphasis>sub procedure</emphasis>
<emphasis>Interrupt</emphasis>, followed by several sub procedures including initialization
steps of microcontroller register, and Main loop.</simpara>
<simpara>A microcontroller program has (normally) no stop. Once powered, it will
run indefinitely. The Main loop is ‘only’ same sections, executed after
each other’s and restarting again and… You know the next.</simpara>
<simpara>Just below the definition section, starting with 2 <emphasis>const</emphasis> which can be
adapted here and used later in the program during compilation process.
The compilation transforms Basic language into Assembler.</simpara>
<simpara>Assembler is the nearest language to a language what a machine can
understand, machine code.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image84.png" contentwidth="642" contentdepth="353"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Procedure to consider next is the routine defining the microcontroller
settings. This PIC family contains registers that you set or unset by
individual bits. To learn more about each individual register, please
have a look into the Data Sheet of the PIC12F683.</simpara>
<simpara>A <emphasis>sub procedure</emphasis> is a part of the program, defined on the beginning and
which will be call every time it is needed inside the main program. This
particular procedure is only executed once on the beginning of the main
program. These settings are just initiated once. The PWM settings will
be modified according the select frequency. See later in the code.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image85.png" contentwidth="642" contentdepth="199"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>After this definition sections, we continue with the interrupt routine
description. The microcontroller is driven by interrupts, this mean,
events happens and, actions must be taken immediately. In this project,
interrupt is driven by a counter. <emphasis>Timer0</emphasis> will overflow regularly to
provide a one second clock. This time clock will be used to activate an
AutoStop security function.</simpara>
<simpara><emphasis>Timer0</emphasis> will be also useful to provide a function for pushbuttons.
Short press and long press will be able to be detected just by measuring
the time of the pressure on the button. An <emphasis>If</emphasis> condition will make the
next actions possible according to your wishes as user of the electronic
module.</simpara>
<simpara>So, with one timer and one interrupt section, we handle at least 2
separated functions, clock with 1 second steps and pushbuttons
management.</simpara>
<simpara>Handling with Timer interrupts may be simplified by using a
<link xlink:href="https://www.mikroe.com/timer-calculator">Timer Calculator</link> tool available
at <link xlink:href="https://www.mikroe.com/">mikroe.com</link>.</simpara>
<simpara>It is enough to indicate your microcontroller settings and tell the
interrupt period you want. In this project we will count 20 interrupts
at 50msec to reach 1 second timing. 49.92ms is the nearest possible for
50ms.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image86.png" contentwidth="438" contentdepth="264"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>These settings are reproduced in the source code. For debugging purpose
Blue LED should blink every second and Red LED at every 50ms. This both
lines in the source code are marked as comments in final program.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image87.png" contentwidth="642" contentdepth="199"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>See below, the frequencies and period measurements. Not bad at all with
an internal oscillator:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image88.png" contentwidth="321" contentdepth="192"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The 1 second time measurement is necessary to handle our security
function AutoStop of the PWM signal. Idea is by reaching for instance 30
seconds, the PWM signal will be forced to 0%, and so let the laser shut
off.</simpara>
<simpara>You see, helping to develop with the support of an oscilloscope can be a
great advantage. Just let blinking some LEDs, measuring their frequency,
or period of a generated signal, will allow you to valid your code and
the selecting settings of the microcontroller.</simpara>
<simpara>For next section, the oscilloscope may be also a great help. PWM2Laser
will allow you to select different frequencies for PWM signal. With the
tests made during development phase, it was easy to have precises
frequencies from 250Hz to 8kHz. A state machine routine was created
where the base frequency was always doubled.</simpara>
<simpara>So, we will have following choices by running frequencies (250Hz at
startup):</simpara>
<simpara>250Hz, 500Hz, 1kHz, 2kHz, 4kHz and 8kHz</simpara>
<simpara>6 different selection cases are coded inside the black pushbutton
management routine. Short press will jump from the first selection to
second, next press from second to third, and so on…. Long press goes
back to 250Hz base frequency selection. After each press, PWM signal
will stop, and new press on Start&amp;Stop is required.</simpara>
<simpara>See please the black pushbutton section, first part of this <emphasis>sub
procedure</emphasis> is the detection routine:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image90.png" contentwidth="642" contentdepth="124"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Second part is the selection and execution of the frequency state
machine:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image91.png" contentwidth="642" contentdepth="467"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The <emphasis>select case</emphasis> contains the different frequencies settings for the
CCP module, as well the count steps for no blocking routine of the LED
blinking sequences. Following diagram page 78 Data Sheet PIC12F683:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image92.png" contentwidth="259" contentdepth="314"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Third part of this <emphasis>sub procedure</emphasis> contains the re-initialization of the
flags for next pushbutton press and the calculation of the Blue LED
blinking period according PWM period settings.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image93.png" contentwidth="642" contentdepth="101"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Next procedure defines the Red pushbutton management. Pretty similar to
Black pushbutton management but including a routine to block PWM
activation as long Potentiometer is not at the lowest position. A short
and long press is also considered, to let activate or not the AutoStop
function.</simpara>
<simpara>First part of the routine is the pushbutton detection program:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image94.png" contentwidth="642" contentdepth="129"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>T<inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image95.png" contentwidth="255" contentdepth="132"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>his
is using command <emphasis>Button</emphasis> provided by mikroBasic PRO language library.
Do not forget to activate this library in your project:</simpara>
<simpara>Next part is the management for Start&amp;Stop pushbutton.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image96.png" contentwidth="642" contentdepth="412"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>As long the potentiometer position is not set for low or off PWM signal,
the CCP module is not activated. Once position is correct, then the CCP
is initialized and activated. Inside this loop alternatively Red and
Blue LED are blinking to indicate, please place the potentiometer in
correct position.</simpara>
<simpara>With pushbutton shortly pressed, AutoStop is activated, and with a long
press, AutoStop is deactivated.</simpara>
<simpara>After both procedures for pushbutton management, we are ready to see the
procedure for Potentiometer reading. This routine is very small and use
a function provided by a library, <emphasis>ADC_read()</emphasis>. Some simple calculation
is done for the CCPR1L value, and another one calculates the average
value for Blue LED blinking period based on 16 samples of the latest PWM
values.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image97.png" contentwidth="642" contentdepth="90"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>That’s it, let’s go to next one, the procedure handling the AutoStop:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image98.png" contentwidth="642" contentdepth="125"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>This routine check if time run out after a period, <emphasis>const</emphasis> EndTimerValue
contains 20 seconds and stop PWM.</simpara>
<simpara>Next procedure to present is the routine let blinking Red LED and Blue
LED. This is a no blocking routine, going through is very fast, just
light or not the LEDs and increase one by one simple counters. Test on
counters let jump from state On to state Off for both LEDs. We could
say, this is a software PWM but much slower than the integrated hardware
PWM module in the CCP (Capture, Compare, PWM modes).</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image99.png" contentwidth="642" contentdepth="341"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Latest procedure, the variables cleaning. This routine just clear
variables if they approach the max size. There are defined as word, so
max up to 65535. I experienced issues and strange reactions of
microcontrollers, so I just do it like that, and no problems anymore.
Please send me some messages if you have information how that happen.
Thank a lot.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image100.png" contentwidth="642" contentdepth="147"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>That was the section for the <emphasis>sub-procedure</emphasis>. Now we jump in the <emphasis>main</emphasis>
section. This section contains 2 major groups. One group to be executed
only once on the power on of the microcontroller and a second group just
running in same sequence over and over. No end will be programmed for
the second group, you need to power off the system.</simpara>
<simpara>On the beginning we call the <emphasis>sub procedure</emphasis> InitPIC() to define the
registers and hardware inputs and outputs.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image101.png" contentwidth="642" contentdepth="136"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Followed by the variable’s initialization with first values:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image102.png" contentwidth="642" contentdepth="325"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>And the initial state of some ports, completed by the activation of
<emphasis>Global Interrupts</emphasis> and <emphasis>Timer0</emphasis>:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image103.png" contentwidth="642" contentdepth="99"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Finally, we define the endless loop combining the different sub
procedures defined previously in a sequence:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image104.png" contentwidth="642" contentdepth="215"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>We let run these 6 procedures after each other’s, and again&#8230;&#8203; the while
condition is always true.</simpara>
<simpara>The program is completed, we can now continue with compiling the source
code.</simpara>
<simpara>Successfully compilation will tell us this:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image105.png" contentwidth="642" contentdepth="159"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The full program (firmware) will take 38% of the ROM and 38% of the RAM.
No really a goal to reach the same percentage, just nice coincidence.</simpara>
<simpara>We have a lot of memory free to add other functions. Imagine what we can
achieve. If you have any ideas, please let me know, my email address can
be finding on the first and last page of this documentation.</simpara>
<simpara>After successfully compilation, an Assembler view is available, showing
how the program look like converted from mikroBasic PRO language into
best understandable language for the Microchip PIC12F683:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image106.png" contentwidth="642" contentdepth="348"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Assembler is more difficult to read, but in school, that was the only
language I learned, yes, years passed…</simpara>
<simpara>The IDE (Integrated Development Environment) give you other information.
For example, on next page, you will see a screen with statistics about
the project. In my code, no single delay command is used, but we
discover that some libraries use this waiting do-nothing commands. I am
not a friend of this instructions but, may be necessary in some cases to
wait on the treatment of an operation like analog/digital conversion
which require times. No worries, no more needs here. This listing is
just for information here.</simpara>
<simpara>If some of you have proposals and ideas how to skip the usage of this
<emphasis>delay()</emphasis> function please let me know, learning is a driven motivation
for projects.</simpara>
<simpara>The statistics view of our project PWM2Laser:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image107.png" contentwidth="642" contentdepth="464"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Maths procedures are also integrated, you remember average calculations
and other formulas are inside the code. The compiler requires these
routines to solve the programmed code.</simpara>
<simpara>Before we can test the program on the electronic board, we need to
program the PIC12F683. For that, connect your module over the ICSP port
with the microcontroller programmer. In our example, we will use the
Microchip PICkit 2 programmer. This is an outdated model but still
useful and with <link xlink:href="http://kair.us/projects/pickitminus/">PICkitminus</link>
application, still up to date. Traditional standalone
<link xlink:href="https://ww1.microchip.com/downloads/en/DeviceDoc/51553E.pdf">PICkit 2
GUI</link> can be also used here. Do the same job.</simpara>
<simpara>During all the development process, I was using the programmer from
MikroE, that have the advantage to be fully interfaced with the IDE.
More information about
<link xlink:href="https://www.mikroe.com/mikroprog-pic-dspic-pic32">mikroProg here</link>.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image108.png" contentwidth="377" contentdepth="213"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Next pages, you will see PICkit 2 in action with the finalized PWM2Laser
module…</simpara>
<simpara>By connection, ensure Pin 1 ICSP is connected with Pin 1 PICkit 2
programmer. This pin is identified by a triangle symbol on PICkit 2
connector. Did you saw the paper support? Most important documentation
ever…</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image109.png" contentwidth="340" contentdepth="503"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>To program with PICkit 2, select for import the <emphasis>PWM2LaserV1.hex</emphasis> file
created:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image110.png" contentwidth="476" contentdepth="324"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>And load it with the PICkit 2 GUI over menu <emphasis>File/Import Hex</emphasis>:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image111.png" contentwidth="310" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Check if the device PIC12F683 (with ID is detected), if not, look in
<emphasis>Device Family</emphasis> to select the right one. Once selected, and .hex file
correctly loaded, you can start the <emphasis>Write</emphasis> process by clicking on the
appropriate button.</simpara>
<simpara>PICkit 2 display microcontroller programming successful write sequence:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image112.png" contentwidth="310" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>To test your module (without connection with laser module), you have the
ability to power from the PICkit 2 programmer with 5V voltage directly
over the ICSP programming port.</simpara>
<simpara>Just adjust voltage to <emphasis>5V</emphasis> in the <emphasis>VDD PICkit 2</emphasis> section and click
checkbox <emphasis>On</emphasis>. Blue lightning LED on the picture below is my dummy laser
module. It is lightning according PWM ratio.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image113.png" contentwidth="341" contentdepth="415"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Read EEPROM content may be useful, in many of my projects, indications
about program, purpose and version are placed in the EEPROM storage
place. So, it is easy to know what is programmed on the microcontroller.
Just read the content and display <emphasis>EEPROM Data</emphasis> windows. Quick and easy.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image115.png" contentwidth="642" contentdepth="340"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Now with a transferred firmware in the PIC12F683, you can test the
application, does a short press on red pushbutton initiate the PWM
signal? Blue LED will go to fully light as more the PWM percentage is
increase with potentiometer turning. Do pressures on black pushbutton
change the frequencies? Red LED should blink faster and faster by
pressure on black pushbutton.</simpara>
<simpara>Try also long pressure on red or black pushbutton (over ½ second)? What
happen? Like written in the source code? Congratulation, you made it!</simpara>
<simpara>If it is running like expected, you can now think to connect the laser
module to the PWM2Laser module. Before connection, ensure power
distribution is shut off.</simpara>
<simpara>But, if you like, you can first realize with your CNC a test support for
the laser module. I realized this kind of support in wood on the very
beginning, when I get the laser module. You will find in the project
folder, a DXF file with my drawings. Having a support is surer and more
practical for security, as well protecting eyes with appropriate glasses
during active laser module. An accident can happen.</simpara>
<simpara>The support parts look like:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image116.png" contentwidth="398" contentdepth="340"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Once toolpath was calculated (using the same routing bit), simulation
view can be displayed:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image117.png" contentwidth="372" contentdepth="264"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>After cutting out with CNC portal, assembly will be achieved with glue:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image118.jpeg" contentwidth="283" contentdepth="202"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Next pictures show us laser diode module in test operations:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image3.jpeg" contentwidth="497" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>One word about the 12V power block used here. This power distribution
has 120W capacity, 10A under 12V. Right now, really too much power
available. But maybe in a near future, new powerful laser diode modules
will exist. Always be ready!</simpara>
<simpara>If you look the cable connections on the power block you will see a
cable between GND and -V (0V). VDD voltage is interconnected with Earth
Ground. CNC electronic and portal have also both signals connected
together. It is useful for instance by high Z axis measures with probe.
Probe will be connected to ground / 0V and so electronic will be able to
detect the edge by voltage level.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image121.jpeg" contentwidth="264" contentdepth="252"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>On the picture below, laser beam is visible, burn point no really.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image123.jpeg" contentwidth="554" contentdepth="377"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The test was successful, the PWM regulation work well, and laser module
respond well. The laser beam focus on the pictures is not adjust to its
best high. So, burn points are just unfocused. Have not tested cut
capacities of this laser module yet, will be for another day.</simpara>
<simpara>This test completes my project. PWM2Laser electronic module and software
are functional and operational.</simpara>
<simpara>Other approaches can be taken, this documentation describes one possible
way. On the next page, you can read my lesson learned, what I could
(should) do better next time. Yep&#8230;&#8203;</simpara>
</section>
<section xml:id="_lessons_learned">
<title>Lessons learned</title>
<simpara>Would like to comment some points I missed or could be done better next
time.</simpara>
<itemizedlist>
<listitem>
<simpara>Miss some test points on the PCB for both LEDs. During software
development, measures of frequencies and activities was helpful for
debugging. Just to see if microcontroller execute the right section is a
good idea. Let activate a LED in some sub procedure is a good debugging
tool and very visible. We cannot so easily see what happen inside the
microcontroller. Having a place to attach the oscilloscope probes for
LEDs and analyzing the signal would be very helpful during conception
and creation.</simpara>
</listitem>
<listitem>
<simpara>Took not the time to create a better Blue LED blinking section. The
desire effect by changing PWM period is not exactly what I was
expecting. If you have some ideas, please contact me.</simpara>
</listitem>
<listitem>
<simpara>I am still using Basic programming language. C and C++ are more used
in the world of microcontrollers.</simpara>
</listitem>
</itemizedlist>
<simpara>If time would be available for me and the projects, I should
definitively learn this programming language.</simpara>
<itemizedlist>
<listitem>
<simpara>Lucky to have an oscilloscope for development, and debugging purposes.
This is a really helpful and nice tool, not quite cheap but if you can
provide one of them, do not hesitate.</simpara>
</listitem>
</itemizedlist>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image124.jpeg" contentwidth="399" contentdepth="264"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<itemizedlist>
<listitem>
<simpara>The story with the red LED becoming a green LED just because not
checking stock before starting the schematic and the references inside
Eagle. So, yes to avoid this annoying issues, just checking stocks
before can help.</simpara>
</listitem>
<listitem>
<simpara>The PCB copper thickness is 35µm mean 0,035mm. If you look the
settings into<?asciidoc-br?>
pcb-gcode, I am using 0,1mm or 100µm for Z depth. The result is not bad
at all for the etching, but according to resolution of the CNC Z axis,
0,07mm or 70µm depth, let say double of copper thickness would be fine.
Y<inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image125.jpeg" contentwidth="357" contentdepth="263"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>ou
can see on the PCB picture that the depth used for Z axis may be too
important.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_updates_to_software_version_1_1">
<title>Updates to software version 1.1</title>
<simpara>Some changes were applied in the software version 1.1. Mainly Blue LED
management was modified to reaching more my expectations. Also,
additional routine was added inside potentiometer management sections to
avoid some PWM glitches with unwanted pulsations near 0 position.</simpara>
<simpara>Both software version 1.0 and 1.1 are provided in project folder. You
can easily compare both versions.<?asciidoc-br?>
First information to check is the change log banner:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image126.png" contentwidth="642" contentdepth="96"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>This
will inform you about the new modifications inside the source code.</simpara>
<simpara>If we look inside the Blue LED management routine, you can discover
changes for low PWM values and for high PWM position. The high value is
fixed and will not change. This is a constant defined on program
beginning in declaration sections. The low value will change according
the PWM percentage. As higher the PWM percentage, as lower this value,
so, the PWM period will change, increasing the frequency of the Blue LED
blinking sequence. As lower the PWM value, as lower is the Blue LED
blinking frequency.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image127.png" contentwidth="642" contentdepth="195"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The values of <emphasis>State_BlueLED</emphasis> and <emphasis>State_BlueLED_Comp</emphasis> are established
inside the potentiometer routine:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image128.png" contentwidth="642" contentdepth="170"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara><emphasis>State_BlueLED_Comp</emphasis> is necessary to have same blinking timing of the
Blue LED. It is a non blocking routine, the timing must be the same as
far we use the PWM resolution as counters. 8 bits and 7 bits resolutions
are used in this project so, we need to compensate counters according
the resulting CCP resolution.</simpara>
<simpara>You see also inside this routine the adjustment program segment witch
force the <emphasis>CCPL_Reference</emphasis> equal to 0 near 0% potentiometer position.
Had some PWM glitches in higher resolution frequency selections and,
this was a small trick to removed them. Need always time to dig more
inside the root cause, and have no so much time to figure out. But you
know, this is again a lesson learned, I should take the time to solve it
correctly!</simpara>
</section>
<section xml:id="_updates_to_software_version_1_2">
<title>Updates to software version 1.2</title>
<simpara>With shortage of semiconductors, I decided to review the source code to
adapt it for Microchip PIC12F1840. Not sure if this model of
microcontroller is more available than the PIC12F683, but let’s do it.</simpara>
<simpara>Source code is based on version 1.1, at that point of time I am not
considering to add or review functions. But will see if ideas raise up
during the coding.</simpara>
<simpara>The conversion from one model to another one consists to correct the
ports names, we changing from GPIOs to PORTAs. So GPx become RAx. Need
to review in some lines of the source code.</simpara>
<simpara>Also the registers needed to be reviewed, some of the registers names
changed, and/or some values from the registers needed to be corrected,
per instance the Timer2 of the PIC12F1840 provides now an additional
prescaler value 1:64 which was not existing by the PIC12F683.</simpara>
<simpara>Timer2 settings needed also to be adapted. I did not touch the preload
values of register PR2. So frequencies were just remeasured with the
oscilloscope and transcript into the source code comments.</simpara>
<simpara>In the comments you can find the Data Sheet pages for every register
settings, also here, the pages were corrected according the PIC12F1840
documentation.</simpara>
<simpara>Project configuration settings were also necessary to review, the new
microcontroller model offer more possibilities, starting with higher
internal clock frequency up to 32Mhz, where the PIC12F683 can only go up
to 8Mhz.</simpara>
<simpara>To learn more about the changes, have a look to the change history
section of the source code:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image129.png" contentwidth="642" contentdepth="147"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>In the source code itself, comments are also adapted to PIC12F1840
microcontroller.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image130.png" contentwidth="521" contentdepth="357"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
</section>
<section xml:id="_updates_to_software_version_1_3">
<title>Updates to software version 1.3</title>
<simpara>With shortage of semiconductors, and maybe it is still not easy to find
a Microchip PIC12F1840, I just ordered few PIC16F18313 and decided to
review the source code to adapt it for this another, hopefully more
available Microchip PIC microcontroller. Additionally MikroE does not
updated recently its IDE mikroBasic to support more new microcontrollers
on the market, so I was looking for a new toolchain needed to work on
another project using newly microcontroller PIC16F17146, and find the
platform <emphasis role="strong">GCBASIC</emphasis> and its IDE <emphasis role="strong">GCStudio</emphasis>. You can learn more about this
development tool by following this URL:</simpara>
<simpara><link xlink:href="https://gcbasic.sourceforge.io/Typesetter/index.php/Home">https://gcbasic.sourceforge.io/Typesetter/index.php/Home</link></simpara>
<simpara>GCStudio includes the GCBASIC compiler making possible to program a
Microchip PIC, but also Microchip AVR or LGT 8-bit microcontroller just
by changing most of the time a compiler directive. You remember, I am
still not learning C/C++ language, GCBASIC is very near to mikroBasic,
and the toolchain supports much more Microchip microcontrollers as the
platform from MikroE. GCBASIC is only for 8 bits microcontrollers. So
let’s give a try!</simpara>
<simpara>GCBASIC do not necessarily contains the same instructions set as
mikroBasic, as well not the same libraries. To adapt the existing source
code from 12F1840 or 12F683 to the new microcontroller 16F18313, it will
be also necessary to rewrite new procedures replacing mikroBasic
libraries, for example the button library, or maybe other functions used
in my initial mikroBasic code.</simpara>
<simpara>I am not so good in algorithmic, and to help me for some routines, you
will see in the proposed source code internet links pointing to the
proposed procedure idea from its respective author. We could mention,
per instance, the case for the push-button routine.
<link xlink:href="https://www.e-tinkers.com/2021/05/the-simplest-button-debounce-solution/">How
to debounce without any wait instructions?</link> I do not like to let wait a
microcontroller, just do nothing…, no! My preference is to have a
running code without any waiting loop by using instructions like
<emphasis>ms_delay()</emphasis>. It is very useful to create non blocking routine, like the
blinking led routine.</simpara>
<simpara>If I would use mikroBasic for this update 1.3, the registers are the
first challenges, and in particular the internal oscillator
configuration. The structure changed and the source code must be
reviewed. Interrupts register as well need a review. But with GCBASIC,
configuring a microcontroller is very easy. Use just one directive,
<link xlink:href="https://gcbasic.sourceforge.io/help/__chip.html"><emphasis role="strong">#CHIP</emphasis></link> and specify the
selected microcontroller for the project, that’s it. The complete source
code will be easily compiled for others microcontroller even if you
select another family. Starting a project with a PIC and then moving to
AVR will be highly simplified and make changes much easier for you (and
for me).</simpara>
<simpara>The <link xlink:href="https://www.youtube.com/@AnobiumTech">YouTube channel from Anobium</link>
help me a lot to learn how to use GCBASIC. Evan is one of the team
member behind the GCBASIC project. His tutorials contribute a lot to
have a better understanding and learning path. Looking how to do
something, do it itself and making mistakes is a very effective learning
process.</simpara>
<simpara>To program the microcontroller, I decided to purchase a new programmer.
As far I want to be able to program in the future AVR microcontrollers,
a Microchip PICkit 5 was bought. I am using the MPLAB IPE software
interfaced with GCStudio. See below how to set the programmer into the
environment.</simpara>
<simpara>Use following parameters in the <emphasis>Command Line Parameters</emphasis> of the
<emphasis>Programmer Editor</emphasis> window:</simpara>
<simpara>-TPPK5 -P%chipmodel% -M -F"%filename%" -OL -W</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image131.png" contentwidth="377" contentdepth="268"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Thank also to Evan (Anobium) for its support during my implementation
tests of the PICkit 5 into GCStudio.<?asciidoc-br?>
He helped me a lot to find the right settings because of strange
reactions of the MPLAB IPE environment by programming the
microcontroller.</simpara>
<simpara>Usually I print out the microcontroller datasheet to be better able to
read the documentation. Right now I have not printed out the PIC16F18313
datasheet, so I will certainly first adapt the code for PIC12F1840, and
then use the functionalities of GCBASIC to easily replace the
microcontroller with the PIC16F18313, remember,
<link xlink:href="https://gcbasic.sourceforge.io/help/__chip.html"><emphasis role="strong">#CHIP</emphasis></link> directive on
the top of the source code. At the time I wrote this chapter, I have not
really start to review the initial source code, this will be a surprise
how that will work.</simpara>
<simpara>Let’s go to the transition from the source code. The transition of the
code starts with the taking over of the procedure and the variables,
because GCBASIC handle most of the registers settings. One technique is
to compile and check the errors. If some variables are not declared
correctly, the compiler inform you and you can adjust the source code as
required.</simpara>
<simpara>As example, I just tried to compile during transition of the procedure
Blinking_Led(), by the way a declaration of a sub procedure is not <emphasis>Sub
procedure &lt;name&gt;</emphasis>, but just <emphasis>Sub &lt;name&gt;</emphasis>. You can see below the compiler
error. Variables used in this procedure are not declared in the source
code. I need to take them over as well.</simpara>
<simpara>I not really copy/paste all the code in one pass, I do it block per
block and compile in between. Not sure if this is the best solution, but
this is a method I am using since very long in my projects.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image132.png" contentwidth="476" contentdepth="216"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>You can see in the compilation errors, an information about an
Array/Function <emphasis>INC</emphasis>. GCBASIC do not recognize the increment command
<emphasis>INC(variable name)</emphasis> from mikroBasic, but this command must be written
as follow:<?asciidoc-br?>
<emphasis>&lt;variable name&gt; += 1</emphasis> to add 1 to the variable at each execution. I
made the changes in the new source code…</simpara>
<simpara>The instruction <emphasis>Const</emphasis> to declare a constant value in mikroBasic is
also not recognized by GCBASIC, we need to use the syntax
<emphasis><link xlink:href="https://gcbasic.sourceforge.io/help/__define.html">#DEFINE</link>.</emphasis> These
compiler errors are solved step by step, one by one during the multiple
compilation iterations. By doing that way, this help me to better
understand and learn this programming language and integrated
development environment.</simpara>
<simpara>Other syntax adaptions were necessary, look into the source code in the
top comments, you will see what was important to correct. First
compilation tests by using the PIC12F1840 and hardware tests were
successful.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image133.png" contentwidth="526" contentdepth="185"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Here the comments excerpt about syntax changes between mikroBasic and
GCBASIC:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image134.png" contentwidth="642" contentdepth="123"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Just replacing now the chip model PIC12F1840 with PIC16F18313 was not
successful. Error on registers name let not use the source code as it
is. More corrections will be necessary.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image135.png" contentwidth="495" contentdepth="123"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject>This
result was to expect, some registers are not identical between both
microcontrollers!</simpara>
<simpara>Before we move to the next microcontroller, why not check and try if
some optimizations in the code are possible to win more program ROM
memory space. If you look the successful compilation screen, you can
read size of the Program Memory is using 912/4096 words (22,27%). Try to
reduce the code can be a good option, and certainly can improve the
number of iterations running instructions code per seconds.</simpara>
<simpara>With the support of Evan,
<link xlink:href="https://sourceforge.net/p/gcbasic/discussion/579126/thread/d3f224eda9/?limit=25#2919/f8b0/e75f">read
more here</link>, you will learn different approaches how to optimize the code
and finally the size of the used memory program steps of the
microcontroller. We started with 912 words, and right now, at the time I
write this sentence, we reached 786 words used for ROM. The RAM usage
was not improved.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image136.png" contentwidth="346" contentdepth="93"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>In the comments of the source code, you can learn multiple code
optimization options used:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image137.png" contentwidth="642" contentdepth="112"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Starting with reading the GCBASIC documentation
(<link xlink:href="https://gcbasic.sourceforge.io/help/">link to GCBASIC HTML documentation
web page</link>) is a good approach. You can also use the
<link xlink:href="https://gcbasic.sourceforge.io/help/output/pdf/gcbasic.pdf">PDF version
of the GCBASIC documentation</link>. Looking on the internet and search for
similar questions can also help you. Some of the optimizations were
possible by individual tests of the code. Just try some ideas, compile
and run can tell you, yes it is working, or not.</simpara>
<simpara>For instance, the optimization approach by using the command
<link xlink:href="https://gcbasic.sourceforge.io/help/_rotate.html">Rotate</link> instead of
division /16 win not only just 5 steps, but let run much faster the
overall loop of the program. This is visible by measuring the Blue LED
blinking frequency. Using an oscilloscope for debug is a good solution.
We saw that already during the previous development stages.</simpara>
<simpara>Now, it is time to replace the microcontrollers. Remember, the datasheet
is the bible for your PIC. The GCBASIC toolchain offer an
<link xlink:href="https://www.youtube.com/watch?v=va_yBJ7lv1g">additional tool called
PICInfo</link>. This tool give you good summary about capabilities for each
selected PIC and let you transfer very easily the PIC parameters to the
source code.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image138.png" contentwidth="308" contentdepth="270"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara><emphasis>PICInfo</emphasis> offers also a direct link to the selected PIC <emphasis role="strong">DataSheet</emphasis>
hosted on Microchip website as well several other nice functionalities.
Call <emphasis>PICInfo</emphasis> over the <emphasis>Run task</emphasis> command line (or simply press [F4]).</simpara>
<simpara>By using the PICkit 5, I just noticed that I made a mistake with the
ICSP connector and its pin positions. For the lesson learned section,
remember me to invert the pins 1 to 5 to let connect the PICkit 5 from
the upper position (by the way, this is the same with PICkit 2 or PICkit
3 if you take attention to the pictures in the documentation, for
instance on page 43). I have not really noticed on the beginning of the
project because I was using the mikroProg programmer, fully interfaced
with the mikroBasic IDE.</simpara>
<simpara>If you take a look in the source code comments, you will see that few
changes were necessary with registers names, but also in some registers
values. As far the PWM CCP module is managed by direct settings and not
with using the GCBASIC integrated functions, the code is less portable
and requires more attention and tests.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image140.png" contentwidth="418" contentdepth="62"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Need also to review all comments with links to the datasheet pages. In
the comments of the source code, references to the pages describing
different settings are given between brackets, e.g. below the PWM
settings of the microcontroller:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image141.png" contentwidth="642" contentdepth="68"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The microcontroller PIC16F18313 is a PPS chip, mean the microcontroller
contains a
<link x<link xlink:href="href="https://microchipdeveloper.com/8bit:pps">">.underline</link>#P#eripheral
[.underline</link>#P#in [.underline]#S#elect] module. The digital output pin
from CCP1 module generating the PWM signal must be connected with the
I/O pin RA2 of the PIC16F18313.</simpara>
<simpara>GCStudio proposes the configuration <emphasis>PIC PPS</emphasis> tool. The idea is to
select the CCP1 output and affect it to the I/O port RA2. This action is
graphically displayed. We could also use manually settings from the
appropriate registers, but this tool is so easy and create direct
available code to be copy and paste in the source code.</simpara>
<simpara>On next page, you can see the screenshot of the PPS CCP1 output
configuration for the PWM signal needed for the laser module.</simpara>
<simpara>PPS configuration screenshot:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image142.png" contentwidth="449" contentdepth="292"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>With the button <emphasis>Copy</emphasis> you place the code in interim memory, and <emphasis>Paste
[CTRL+V]</emphasis> it into the source code:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image143.png" contentwidth="528" contentdepth="190"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>As far the PWM module work with 10 bits resolution, why not rework the
source code and use the full range of the potentiometer and the PWM
resolution module. The ADC module have also a resolution of 10 bits, the
mapping is more easier, and will reduce the number of calculations
inside the microcontroller working code. <emphasis>CCP1CON</emphasis> get new register
values for the correct PWM settings.</simpara>
<simpara>The blinking sequence for the Blue LED must be also reviewed, it is
based on the Potentiometer to PWM calculations. The used constant values
were defined by making some blinking tests. Also the reference is now
based on the potentiometer position using always same resolution of 10
bits, so 1024 values. This will never change, and make the Maths
identical despite the resulting PWM resolution from the frequency
selection.</simpara>
<simpara>This microcontroller PIC16F18313 needs much more configuration words as
more basics microcontrollers like PIC12F683, so one of the new
configuration word is CSWEN. I have not took attention, put it at OFF,
and so the clock was the double frequency of my supposed settings. You
can imagine with that settings, every timer took half time as programmed
in the source code, and I was surprised why suddenly the PWM frequency
changed from 250 Hz to 500 Hz&#8230;&#8203; I learned again something!</simpara>
<simpara>After all these changes and corrections, the code is running as
expected. The microcontroller PIC16F18313 generates its PWM pulses. The
conversion from mikroBasic to GCBASIC and the source code porting from
PIC12F1840 to PIC16F18313 are completed. Nice experience to move
hardware and software. Thank to the GCBASIC Team and in particular to
Evan for its very appreciated support!</simpara>
</section>
<section xml:id="_pwm2laser_project_documentation_history">
<title>PWM2Laser project documentation history</title>
<simpara>Version 1.0 created May 2022, Initial release of this project
documentation.</simpara>
<simpara>Version 1.1, June 2022, Add undocumented pages to let print the document
by print company,</simpara>
<simpara>Review blue led blinking sequences routine,</simpara>
<simpara>Add reducing PWM glitches routine,</simpara>
<simpara>Content and text corrections.</simpara>
<simpara>Version 1.11, August 2022 Add forgotten screenshots CNC preview PCB
toolpath,</simpara>
<simpara>Minor changes in the documentation text.</simpara>
<simpara>Version 1.2, October 2022 Adapt source code in version 1.2 for
PIC12F1840 microcontroller.</simpara>
<simpara>Version 1.3, November 2023 Use new toolchain GCBASIC and PICkit 5 as
programmer,</simpara>
<simpara>Adapt source code in version 1.3 for PIC16F18313 microcontroller,</simpara>
<simpara>Optimize GCBASIC code to win program memory space,</simpara>
<simpara>Rearrange procedures positions in source code,</simpara>
<simpara>Minor changes in sentences inside the complete documentation,</simpara>
<simpara>Review some source code comments, add more explanation,</simpara>
<simpara>Review the necessary registers used by PIC16F18313,</simpara>
<simpara>Reworked Maths for PWM settings and 10 bits resolution,</simpara>
<simpara>Reviewed Maths for Blue LED blinking sequences.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/image2.png" contentwidth="642" contentdepth="617"/>
</imageobject>
<textobject><phrase>image</phrase></textobject>
</inlinemediaobject><emphasis role="strong">This
page is intentionally undocumented</emphasis></simpara>
</section>
<section xml:id="_conclusion">
<title>Conclusion</title>
<simpara>Now is time to write the conclusion. When I decided to create this
project in a documented way, I not really imagined how deep that bring
me and how long would be this document. We could certainly write more
and more for each topic, explain more the process, the content, the
reason why I took one way or another way. On the end, the solution paths
I have chosen are not the only ones. We have different ways to reach the
goal. Also, the tools available on marked, and also free of charges for
many of them, can be different from my own choices.</simpara>
<simpara>Anyway, I just hope that this documentation can help you to learn, to
reproduce and later with more experience create your own electronic
projects. I will also enjoy any kind of feedback. Helping each other,
and we already making progress, we all learn from scratch and sharing
our experience is a very good way to progress.</simpara>
<simpara>This PWM2Laser module was just intended to have a way for test the
purchased laser module out of the box. Its purpose is not really to be
mounted on CNC for manually power adjustment. This role will be for the
CNC control, the interface with computer will be my next project.</simpara>
<simpara>This documentation was not really written as a book, but by reviewing
the content, I asked myself if this was not a “small book” at the end.
But who knows, maybe one day I will write a real one.</simpara>
<simpara>To contact me, please use following email: <link xlink:href="mailto:FETFabrice@gmail.com">FETFabrice@gmail.com</link></simpara>
<simpara>Wish you good continuation in the CNC (and electronic) adventure.</simpara>
<simpara>Fabrice ENGEL</simpara>
<simpara>France – May 2022 - November 2023</simpara>
</section>
</article>